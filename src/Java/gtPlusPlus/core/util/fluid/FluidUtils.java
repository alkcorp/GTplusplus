package gtPlusPlus.core.util.fluid;

import gregtech.api.enums.*;
import gregtech.api.util.GT_LanguageManager;
import gtPlusPlus.core.fluids.GenericFluid;
import gtPlusPlus.core.item.base.BaseItemComponent;
import gtPlusPlus.core.item.base.cell.BaseItemPlasmaCell;
import gtPlusPlus.core.material.Material;
import gtPlusPlus.core.material.MaterialStack;
import gtPlusPlus.core.util.Utils;
import gtPlusPlus.core.util.item.ItemUtils;
import gtPlusPlus.xmod.gregtech.api.enums.GregtechOrePrefixes.GT_Materials;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraftforge.fluids.*;

public class FluidUtils {

	public static FluidStack getFluidStack(final String fluidName, final int amount){
		Utils.LOG_WARNING("Trying to get a fluid stack of "+fluidName);
		try {
			return FluidRegistry.getFluidStack(fluidName, amount).copy();
		}
		catch (final Throwable e){
			return null;
		}

	}

	public static FluidStack getFluidStack(final FluidStack vmoltenFluid, final int fluidAmount) {
		Utils.LOG_WARNING("Trying to get a fluid stack of "+vmoltenFluid.getFluid().getName());
		try {
			return FluidRegistry.getFluidStack(vmoltenFluid.getFluid().getName(), fluidAmount).copy();
		}
		catch (final Throwable e){
			return null;
		}
	}

	public static FluidStack getFluidStack(final Fluid vFluid, final int fluidAmount) {
		Utils.LOG_WARNING("Trying to get a fluid stack of "+vFluid.getName());
		try {
			return FluidRegistry.getFluidStack(vFluid.getName(), fluidAmount).copy();
		}
		catch (final Throwable e){
			return null;
		}
	}

	public static FluidStack[] getFluidStackArray(final String fluidName, final int amount){
		Utils.LOG_WARNING("Trying to get a fluid stack of "+fluidName);
		try {
			final FluidStack[] singleFluid = {FluidRegistry.getFluidStack(fluidName, amount)};
			return singleFluid;
		}
		catch (final Throwable e){
			return null;
		}

	}

	public static FluidStack[] getFluidStackArray(final FluidStack fluidName, final int amount){
		Utils.LOG_WARNING("Trying to get a fluid stack of "+fluidName);
		try {
			final FluidStack[] singleFluid = {FluidRegistry.getFluidStack(fluidName.getLocalizedName(), amount)};
			return singleFluid;
		}
		catch (final Throwable e){
			return null;
		}

	}


	/**
	 * @param String displayName
	 * @param String fluidName
	 * @param int meltingPointC Temp
	 * @param short[] rgba
	 * @param byte state
	 * States: 0 (Solid), 1 (Fluid), 2(Gas), 3(Plasma) 4(Fuel I think? Don't use.)
	 *
	 * @return short[]
	 */
	public static Fluid generateFluid(final String displayName, final String fluidName, final int tempK, final short[] rgba ,final int aState){
		Fluid generatedFluid = null;
		switch (aState) {
		case 0: {
			generatedFluid = new GenericFluid(displayName, fluidName, 0, 100, tempK, 10000, false, rgba);
			break;
		}
		default:
		case 1:
		case 4: {
			generatedFluid = new GenericFluid(displayName, fluidName, 0, 100, tempK, 1000, false, rgba);
			break;
		}
		case 2: {
			generatedFluid = new GenericFluid(displayName, fluidName, 0, -100, tempK, 200, true, rgba);
			break;
		}
		case 3: {
			generatedFluid = new GenericFluid(displayName, fluidName, 15, -10000, tempK, 10, true, rgba);
			break;
		}
		}
		return generatedFluid;
	}
	/**
	 *
	 * @param String fluidName
	 * @param int meltingPointC Temp
	 * @param short[] rgba
	 * @param byte state
	 * States: 0 (Solid), 1 (Fluid), 2(Gas), 3(Plasma) 4(Fuel I think? Don't use.)
	 *
	 * @return short[]
	 */
	public static Fluid generateFluid(final Material material ,final int aState){
		final int tempK = material.getMeltingPointC();
		Fluid generatedFluid = null;
		switch (aState) {
		case 0: {
			generatedFluid = new GenericFluid(material, 0, 100, tempK, 10000, false);
			break;
		}
		default:
		case 1:
		case 4: {
			generatedFluid = new GenericFluid(material, 0, 100, tempK, 1000, false);
			break;
		}
		case 2: {
			generatedFluid = new GenericFluid(material, 0, -100, tempK, 200, true);
			break;
		}
		case 3: {
			generatedFluid = new GenericFluid(material, 15, -10000, tempK, 10, true);
			break;
		}
		}
		return generatedFluid;
	}


	public static Fluid addAutogeneratedMoltenFluid(final String materialNameFormatted, final short[] rgba, final int MeltingPoint) {
		return addFluid("molten." + materialNameFormatted.toLowerCase(), "molten.autogenerated", "Molten " + materialNameFormatted, null, rgba, 1, (MeltingPoint <= 0L) ? 1000L : MeltingPoint, null, null, 0);
	}

	public static Fluid addAutogeneratedMoltenFluid(final GT_Materials aMaterial) {
		return addFluid("molten." + aMaterial.name().toLowerCase(), "molten.autogenerated", "Molten " + aMaterial.name(), aMaterial, aMaterial.mMoltenRGBa, 1, (aMaterial.mMeltingPoint <= 0L) ? 1000L : aMaterial.mMeltingPoint, null, null, 0);
	}

	public static Fluid addFluid(final String aName, final String aLocalized, final GT_Materials aMaterial, final int aState, final long aTemperatureK) {
		return addFluid(aName, aLocalized, aMaterial, aState, aTemperatureK, null, null, 0);
	}

	public static Fluid addFluid(final String aName, final String aLocalized, final GT_Materials aMaterial, final int aState, final long aTemperatureK, final ItemStack aFullContainer, final ItemStack aEmptyContainer, final int aFluidAmount) {
		return addFluid(aName, aName.toLowerCase(), aLocalized, aMaterial, null, aState, aTemperatureK, aFullContainer, aEmptyContainer, aFluidAmount);
	}

	public static Fluid addFluid(String aName, final String aTexture, final String aLocalized, final GT_Materials aMaterial, final short[] aRGBa, final int aState, final long aTemperatureK, final ItemStack aFullContainer, final ItemStack aEmptyContainer, final int aFluidAmount) {
		aName = Utils.sanitizeString(aName.toLowerCase());
		Fluid rFluid = new FluidGT6(aName, aTexture, (aRGBa != null) ? aRGBa : Dyes._NULL.getRGBA());
		GT_LanguageManager.addStringLocalization(rFluid.getUnlocalizedName(), (aLocalized == null) ? aName : aLocalized);
		if (FluidRegistry.registerFluid(rFluid)) {
			switch (aState) {
			case 0: {
				rFluid.setGaseous(false);
				rFluid.setViscosity(10000);
				break;
			}
			case 1:
			case 4: {
				rFluid.setGaseous(false);
				rFluid.setViscosity(1000);
				break;
			}
			case 2: {
				rFluid.setGaseous(true);
				rFluid.setDensity(-100);
				rFluid.setViscosity(200);
				break;
			}
			case 3: {
				rFluid.setGaseous(true);
				rFluid.setDensity(-10000);
				rFluid.setViscosity(10);
				rFluid.setLuminosity(15);
				break;
			}
			}
		}
		else {
			rFluid = FluidRegistry.getFluid(aName);
		}
		if ((rFluid.getTemperature() == new Fluid("test").getTemperature()) || (rFluid.getTemperature() <= 0)) {
			rFluid.setTemperature((int) (aTemperatureK));
		}
		if (aMaterial != null) {
			switch (aState) {
			case 1: {
				aMaterial.mFluid = (rFluid);
				break;
			}
			case 2: {
				aMaterial.mGas = (rFluid);
				break;
			}
			case 3: {
				aMaterial.mPlasma = (rFluid);
				break;
			}
			}
		}
		if ((aFullContainer != null) && (aEmptyContainer != null) && !FluidContainerRegistry.registerFluidContainer(new FluidStack(rFluid, aFluidAmount), aFullContainer, aEmptyContainer)) {
			GT_Values.RA.addFluidCannerRecipe(aFullContainer, container(aFullContainer, false), null, new FluidStack(rFluid, aFluidAmount));
		}
		return rFluid;
	}

	public static Fluid addGTFluid(final String aName, final String aLocalized, final short[] aRGBa, final int aState, final long aTemperatureK, final ItemStack aFullContainer, final ItemStack aEmptyContainer, final int aFluidAmount) {
		return addGTFluid("molten."+aName, "molten.autogenerated", aLocalized, aRGBa, aState, aTemperatureK, aFullContainer, aEmptyContainer, aFluidAmount);
	}

	public static Fluid addGTFluidNonMolten(final String aName, final String aLocalized, final short[] aRGBa, final int aState, final long aTemperatureK, final ItemStack aFullContainer, final ItemStack aEmptyContainer, final int aFluidAmount) {
		return addGTFluid("fluid."+aName, "fluid.autogenerated", aLocalized, aRGBa, aState, aTemperatureK, aFullContainer, aEmptyContainer, aFluidAmount);
	}

	public static Fluid addGTPlasma(final Material aMaterial) {
		if (aMaterial.getLocalizedName().toLowerCase().contains("clay") || aMaterial.getComposites().size()>1 || aMaterial.getLocalizedName().toLowerCase().contains("wrought")){
			return null;
		}
		Utils.LOG_INFO("Generating a "+aMaterial.getLocalizedName()+" Plasma Cell");
		if (aMaterial.vComponentCount != 1){
			Utils.LOG_INFO("Compound made from: ");
			for (final MaterialStack x : aMaterial.getComposites()){
				Utils.LOG_INFO(x.getStackMaterial().getLocalizedName());
			}
			Utils.LOG_INFO("Material is a composite, not generating plasma.");
			return null;
		}

		ItemStack temp = null;
		//Generate a Cell if we need to
		if (ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cellPlasma"+aMaterial.getUnlocalizedName(), 1) == null){
			final Item temp2 = new BaseItemPlasmaCell(aMaterial);
			temp = aMaterial.getPlasmaCell(1);
		}
		else {
			temp = ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cellPlasma"+aMaterial.getUnlocalizedName(), 1);
		}
		if (temp != null){
			return addGTFluid(
					"plasma." + Utils.sanitizeString(aMaterial.getLocalizedName().toLowerCase()),
					"plasma.autogenerated",
					aMaterial.getLocalizedName() + " Plasma",
					aMaterial.getRGBA(),
					3,
					10000,
					temp,
					ItemList.Cell_Empty.get(1L, new Object[0]),
					1000);
		}
		return null;
	}

	public static Fluid addGTFluid(String aName, final String aTexture, final String aLocalized, final short[] aRGBa, final int aState, final long aTemperatureK, final ItemStack aFullContainer, final ItemStack aEmptyContainer, final int aFluidAmount) {
		aName = Utils.sanitizeString(aName.toLowerCase());
		Fluid rFluid = new FluidGT6(aName, aTexture, (aRGBa != null) ? aRGBa : Dyes._NULL.getRGBA());
		GT_LanguageManager.addStringLocalization(rFluid.getUnlocalizedName(), (aLocalized == null) ? aName : aLocalized);
		if (FluidRegistry.registerFluid(rFluid)) {
			switch (aState) {
			case 0: {
				rFluid.setGaseous(false);
				rFluid.setViscosity(10000);
				break;
			}
			case 1:
			case 4: {
				rFluid.setGaseous(false);
				rFluid.setViscosity(1000);
				break;
			}
			case 2: {
				rFluid.setGaseous(true);
				rFluid.setDensity(-100);
				rFluid.setViscosity(200);
				break;
			}
			case 3: {
				rFluid.setGaseous(true);
				rFluid.setDensity(-10000);
				rFluid.setViscosity(10);
				rFluid.setLuminosity(15);
				break;
			}
			}
		}
		else {
			rFluid = FluidRegistry.getFluid(aName);
		}
		if ((rFluid.getTemperature() == new Fluid("test").getTemperature()) || (rFluid.getTemperature() <= 0)) {
			rFluid.setTemperature((int) (aTemperatureK));
		}
		if ((aFullContainer != null) && (aEmptyContainer != null) && !FluidContainerRegistry.registerFluidContainer(new FluidStack(rFluid, aFluidAmount), aFullContainer, aEmptyContainer)) {
			GT_Values.RA.addFluidCannerRecipe(aFullContainer, container(aFullContainer, false), null, new FluidStack(rFluid, aFluidAmount));
		}
		return rFluid;
	}

	public static boolean valid(final Object aStack) {
		return (aStack != null) && (aStack instanceof ItemStack) && (((ItemStack)aStack).getItem() != null) && (((ItemStack)aStack).stackSize >= 0);
	}

	public static boolean invalid(final Object aStack) {
		return (aStack == null) || !(aStack instanceof ItemStack) || (((ItemStack)aStack).getItem() == null) || (((ItemStack)aStack).stackSize < 0);
	}

	public static boolean equal(final ItemStack aStack1, final ItemStack aStack2) {
		return equal(aStack1, aStack2, false);
	}

	public static boolean equal(final ItemStack aStack1, final ItemStack aStack2, final boolean aIgnoreNBT) {
		return (aStack1 != null) && (aStack2 != null) && equal_(aStack1, aStack2, aIgnoreNBT);
	}

	public static boolean equal_(final ItemStack aStack1, final ItemStack aStack2, final boolean aIgnoreNBT) {
		return (aStack1.getItem() == aStack2.getItem()) && (aIgnoreNBT || ((aStack1.getTagCompound() == null == (aStack2.getTagCompound() == null)) && ((aStack1.getTagCompound() == null) || aStack1.getTagCompound().equals(aStack2.getTagCompound())))) && ((meta(aStack1) == meta(aStack2)) || (meta(aStack1) == 32767) || (meta(aStack2) == 32767));
	}

	public static ItemStack copy(final Object... aStacks) {
		for (final Object tStack : aStacks) {
			if (valid(tStack)) {
				return ((ItemStack)tStack).copy();
			}
		}
		return null;
	}

	public static ItemStack copyMeta(final long aMetaData, final Object... aStacks) {
		final ItemStack rStack = copy(aStacks);
		if (invalid(rStack)) {
			return null;
		}
		return meta(rStack, aMetaData);
	}

	public static short meta(final ItemStack aStack) {
		return (short)Items.feather.getDamage(aStack);
	}

	public static ItemStack meta(final ItemStack aStack, final long aMeta) {
		Items.feather.setDamage(aStack, (short)aMeta);
		return aStack;
	}

	public static ItemStack amount(final long aAmount, final Object... aStacks) {
		final ItemStack rStack = copy(aStacks);
		if (invalid(rStack)) {
			return null;
		}
		rStack.stackSize = (int)aAmount;
		return rStack;
	}

	public static ItemStack container(final ItemStack aStack, final boolean aCheckIFluidContainerItems) {
		if (invalid(aStack)) {
			return null;
		}
		if (aStack.getItem().hasContainerItem(aStack)) {
			return aStack.getItem().getContainerItem(aStack);
		}
		if (equal(aStack, ItemList.Cell_Empty.get(1), true)) {
			return null;
		}
		if (aCheckIFluidContainerItems && (aStack.getItem() instanceof IFluidContainerItem) && (((IFluidContainerItem)aStack.getItem()).getCapacity(aStack) > 0)) {
			final ItemStack tStack = amount(1L, aStack);
			((IFluidContainerItem)aStack.getItem()).drain(tStack, Integer.MAX_VALUE, true);
			if (!equal(aStack, tStack)) {
				return tStack;
			}
			return null;
		}
		if (equal(aStack, ItemList.IC2_ForgeHammer.get(1)) || equal(aStack, ItemList.IC2_WireCutter.get(1))) {
			return copyMeta(meta(aStack) + 1, aStack);
		}
		return null;
	}

	public static ItemStack container(final ItemStack aStack, final boolean aCheckIFluidContainerItems, final int aStacksize) {
		return amount(aStacksize, container(aStack, aCheckIFluidContainerItems));
	}

	public final static Fluid generateFluid(final String unlocalizedName, final String localizedName, final int MeltingPoint, final short[] RGBA){
		if ((FluidUtils.getFluidStack("molten"+"."+unlocalizedName.toLowerCase(), 1) == null) && (ItemUtils.getItemStackOfAmountFromOreDictNoBroken("dust"+Utils.sanitizeString(localizedName), 1) != null)){
			Utils.LOG_WARNING("Generating our own fluid.");

			//Generate a Cell if we need to
			if (ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cell"+unlocalizedName, 1) == null){
				@SuppressWarnings("unused")
				final
				Item temp = new BaseItemComponent(unlocalizedName, localizedName, RGBA);
			}

			final Fluid gtFluid = FluidUtils.addGTFluid(
					unlocalizedName,
					"Molten "+localizedName,
					RGBA,
					4,
					MeltingPoint,
					ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cell"+unlocalizedName, 1),
					ItemList.Cell_Empty.get(1L, new Object[0]),
					1000);

			GT_Values.RA.addFluidExtractionRecipe(
					ItemUtils.getItemStackOfAmountFromOreDictNoBroken("dust"+Utils.sanitizeString(localizedName), 1), //Input
					null, //Input 2
					FluidUtils.getFluidStack(gtFluid, 144), //Fluid Output
					0, //Chance
					1*20, //Duration
					16 //Eu Tick
					);
			return gtFluid;
		}
		Utils.LOG_INFO("FLUID GENERATION FAILED FOR "+localizedName);
		return null;
	}

	public final static Fluid generateFluidNonMolten(final String unlocalizedName, final String localizedName, final int MeltingPoint, final short[] RGBA, ItemStack dustStack, final ItemStack dustStack2){
		if (dustStack == null){
			dustStack = ItemUtils.getItemStackOfAmountFromOreDictNoBroken("dust"+Utils.sanitizeString(localizedName), 1);
		}
		if ((FluidUtils.getFluidStack(unlocalizedName.toLowerCase(), 1) == null)/* && ((dustStack != null) || (dustStack2 != null))*/){
			Utils.LOG_WARNING("Generating our own fluid.");

			//Generate a Cell if we need to
			if (ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cell"+unlocalizedName, 1) == null){
				@SuppressWarnings("unused")
				final
				Item temp = new BaseItemComponent(unlocalizedName, localizedName, RGBA);
			}

			final Fluid gtFluid = FluidUtils.addGTFluidNonMolten(
					unlocalizedName,
					localizedName,
					RGBA,
					4,
					MeltingPoint,
					ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cell"+unlocalizedName, 1),
					ItemList.Cell_Empty.get(1L, new Object[0]),
					1000);

			if (dustStack != null){
				GT_Values.RA.addFluidExtractionRecipe(
						dustStack, //Input
						null, //Input 2
						FluidUtils.getFluidStack(gtFluid, 144), //Fluid Output
						0, //Chance
						1*20, //Duration
						16 //Eu Tick
						);
			}
			if (dustStack2 != null){
				GT_Values.RA.addFluidExtractionRecipe(
						dustStack2, //Input
						null, //Input 2
						FluidUtils.getFluidStack(gtFluid, 144), //Fluid Output
						0, //Chance
						1*20, //Duration
						16 //Eu Tick
						);
			}

			return gtFluid;
		}
		Utils.LOG_INFO("FLUID GENERATION FAILED FOR "+localizedName);
		return null;
	}

}
